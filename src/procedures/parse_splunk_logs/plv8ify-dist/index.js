!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?module.exports=n():"function"==typeof define&&define.amd?define(n):(e="undefined"!=typeof globalThis?globalThis:e||self).parse_splunk_logs=n()}(this,(function(){"use strict";return function(e){plv8.elog(INFO,"Starting procedure to process splunk logs from "+e+", "+(new Date).toISOString());var n=e+"_temp";plv8.execute("CREATE TABLE "+n+" AS (\n      SELECT EXTRACT_KEYVALS(_raw) log_object, * FROM "+plv8.quote_ident(e)+"\n    );"),plv8.execute("CREATE INDEX ON "+n+" (log_object); CREATE INDEX ON "+n+" (_raw);"),plv8.elog(INFO,"Created table "+n+" for parsing, "+(new Date).toISOString());var t=plv8.execute("SELECT DISTINCT log_object ->> 'serial_number' serial_number FROM "+n+" WHERE log_object ->> 'serial_number' IS NOT NULL ORDER BY 1").map((function(e){return e.serial_number})).filter((function(e){return"string"==typeof e&&e.length>0}));plv8.elog(INFO,"Extracting log values from "+n+" for serial numbers "+JSON.stringify(t));var s=plv8.prepare("SELECT (log_object ->> 'log_time') ::TIMESTAMP first_connection_time FROM "+plv8.quote_ident(n)+" WHERE log_object @@ '$.connection_reason == \"FIRST_CONNECTION\"' AND (log_object ->> 'serial_number') = $1",["text"]),o=plv8.prepare("SELECT (log_object ->> 'patch_activation_time') ::TIMESTAMP patch_activation_time FROM "+plv8.quote_ident(n)+" WHERE log_object @@ '$.patch_activation_time != null' AND (log_object ->> 'serial_number') = $1",["text"]);return t.forEach((function(t){("string"==typeof t||t.length>0)&&(s.execute([t]).forEach((function(s){o.execute([t]).forEach((function(o){var r=s.first_connection_time,a=o.patch_activation_time;plv8.elog(INFO,"Parsing Records associated with serial_number: "+t+" and first_connection_time: "+r+" and patch_activation_time: "+a);var _=plv8.quote_nullable(r.toISOString()),l=plv8.quote_nullable(a.toISOString()),i=plv8.quote_nullable(e);!function(e,n,t,s,o){var r="\nSELECT\n  s.sourcetype\n  , (JSONB_POPULATE_RECORD(NULL::gateway_connection, s.log_object)).*\n  , s._raw\n  , s.log_object\n  , "+e+" ::TIMESTAMP first_connection_time\n  , "+n+" ::TIMESTAMP patch_activation_time\n  , "+t+" source_table\nFROM "+s+" s\nWHERE\n  s.log_object ->> 'connection_reason' IS NOT NULL\n  AND \n  (s.log_object ->> 'serial_number') = "+plv8.quote_literal(o)+"\n        ";try{plv8.subtransaction((function(){plv8.elog(INFO,"Creating table splunk_01_gateway_connections, "+(new Date).toISOString()),plv8.execute("CREATE TABLE splunk_01_gateway_connections AS ("+r+");")}))}catch(e){plv8.elog(INFO,"CREATE TABLE splunk_01_gateway_connections failed, error message: "+e+", "+(new Date).toISOString()),plv8.elog(INFO,"Inserting records into splunk_01_gateway_connections, "+(new Date).toISOString());try{plv8.subtransaction((function(){return plv8.execute("INSERT INTO splunk_01_gateway_connections "+r+" AND NOT EXISTS(SELECT 1 FROM splunk_01_gateway_connections sub WHERE sub._raw = s._raw);")}))}catch(e){plv8.elog(INFO,"INSERT INTO TABLE splunk_01_gateway_connections failed, error message: "+e+", "+(new Date).toISOString())}}}(_,l,i,n,t),function(e,n,t,s,o){var r="\nSELECT\n  s.sourcetype\n  , (JSONB_POPULATE_RECORD(NULL::event_analysis_request, s.log_object)).*\n  , s._raw\n  , s.log_object\n  , "+e+" ::TIMESTAMP first_connection_time\n  , "+n+" ::TIMESTAMP patch_activation_time\n  , "+t+" source_table\nFROM "+s+" s\nWHERE\n  s._raw ~ 'Created analysis request'\n  AND \n  (s.log_object ->> 'serial_number') = "+plv8.quote_literal(o)+"\n        ";try{plv8.subtransaction((function(){plv8.elog(INFO,"Creating table splunk_02_event_analysis_requests, "+(new Date).toISOString()),plv8.execute("CREATE TABLE splunk_02_event_analysis_requests AS ("+r+");")}))}catch(e){plv8.elog(INFO,"CREATE TABLE splunk_02_event_analysis_requests failed, error message: "+e+", "+(new Date).toISOString()),plv8.elog(INFO,"Inserting records into splunk_02_event_analysis_requests, "+(new Date).toISOString());try{plv8.subtransaction((function(){return plv8.execute("INSERT INTO splunk_02_event_analysis_requests "+r+" AND NOT EXISTS(SELECT 1 FROM splunk_02_event_analysis_requests sub WHERE sub._raw = s._raw);")}))}catch(e){plv8.elog(INFO,"INSERT INTO TABLE splunk_02_event_analysis_requests failed, error message: "+e+", "+(new Date).toISOString())}}}(_,l,i,n,t),function(e,n,t,s,o){var r="\nSELECT\n  s.sourcetype\n  , (JSONB_POPULATE_RECORD(NULL::event_patch_command, s.log_object)).*\n  , s._raw\n  , s.log_object\n  , "+e+" ::TIMESTAMP first_connection_time\n  , "+n+" ::TIMESTAMP patch_activation_time\n  , "+t+" source_table\nFROM "+s+" s\nWHERE\n  s.log_object @@ '$.analysis_request_id != null'\n  AND \n  (s.log_object ->> 'serial_number') = "+plv8.quote_literal(o)+"\n        ";try{plv8.subtransaction((function(){plv8.elog(INFO,"Creating table splunk_03_patch_commands, "+(new Date).toISOString()),plv8.execute("CREATE TABLE splunk_03_patch_commands AS ("+r+");")}))}catch(e){plv8.elog(INFO,"CREATE TABLE splunk_03_patch_commands failed, error message: "+e+", "+(new Date).toISOString()),plv8.elog(INFO,"Inserting records into splunk_03_patch_commands, "+(new Date).toISOString());try{plv8.subtransaction((function(){return plv8.execute("INSERT INTO splunk_03_patch_commands "+r+" AND NOT EXISTS(SELECT 1 FROM splunk_03_patch_commands sub WHERE sub._raw = s._raw);")}))}catch(e){plv8.elog(INFO,"INSERT INTO TABLE splunk_03_patch_commands failed, error message: "+e+", "+(new Date).toISOString())}}}(_,l,i,n,t),function(e,n,t,s,o){var r="\nSELECT\n  s.sourcetype\n  , (JSONB_POPULATE_RECORD(NULL::event_classifier_response, s.log_object)).*\n  , s._raw\n  , s.log_object\n  , "+e+" ::TIMESTAMP first_connection_time\n  , "+n+" ::TIMESTAMP patch_activation_time\n  , "+t+" source_table\nFROM "+s+" s\nWHERE\n  s._raw ~ '(EventDataMessageHandler.+received event)'\n  AND \n  (s.log_object ->> 'serial_number') = "+plv8.quote_literal(o)+"\n        ";try{plv8.subtransaction((function(){plv8.elog(INFO,"Creating table splunk_04_classifier_responses, "+(new Date).toISOString()),plv8.execute("CREATE TABLE splunk_04_classifier_responses AS ("+r+");")}))}catch(e){plv8.elog(INFO,"CREATE TABLE splunk_04_classifier_responses failed, error message: "+e+", "+(new Date).toISOString()),plv8.elog(INFO,"Inserting records into splunk_04_classifier_responses, "+(new Date).toISOString());try{plv8.subtransaction((function(){return plv8.execute("INSERT INTO splunk_04_classifier_responses "+r+" AND NOT EXISTS(SELECT 1 FROM splunk_04_classifier_responses sub WHERE sub._raw = s._raw);")}))}catch(e){plv8.elog(INFO,"INSERT INTO TABLE splunk_04_classifier_responses failed, error message: "+e+", "+(new Date).toISOString())}}}(_,l,i,n,t),function(e,n,t,s,o){var r="\nSELECT\n  s.sourcetype\n  , (JSONB_POPULATE_RECORD(NULL::event_classifier_receipt, s.log_object)).*\n  , s._raw\n  , s.log_object\n  , "+e+" ::TIMESTAMP first_connection_time\n  , "+n+" ::TIMESTAMP patch_activation_time\n  , "+t+" source_table\nFROM "+s+" s\nWHERE\n  s._raw ~ '(RoutingServiceProvider - event=\"transmission.received\")'\n  AND \n  (s.log_object ->> 'serial_number') = "+plv8.quote_literal(o)+"\n        ";try{plv8.subtransaction((function(){plv8.elog(INFO,"Creating table splunk_05_classifier_receipts, "+(new Date).toISOString()),plv8.execute("CREATE TABLE splunk_05_classifier_receipts AS ("+r+");")}))}catch(e){plv8.elog(INFO,"CREATE TABLE splunk_05_classifier_receipts failed, error message: "+e+", "+(new Date).toISOString()),plv8.elog(INFO,"Inserting records into splunk_05_classifier_receipts, "+(new Date).toISOString());try{plv8.subtransaction((function(){return plv8.execute("INSERT INTO splunk_05_classifier_receipts "+r+" AND NOT EXISTS(SELECT 1 FROM splunk_05_classifier_receipts sub WHERE sub._raw = s._raw);")}))}catch(e){plv8.elog(INFO,"INSERT INTO TABLE splunk_05_classifier_receipts failed, error message: "+e+", "+(new Date).toISOString())}}}(_,l,i,n,t),function(e,n,t,s,o){var r="\nSELECT\n  s.sourcetype\n  , (JSONB_POPULATE_RECORD(NULL::event_action, s.log_object)).*\n  , s._raw\n  , s.log_object\n  , "+e+" ::TIMESTAMP first_connection_time\n  , "+n+" ::TIMESTAMP patch_activation_time\n  , "+t+" source_table\nFROM "+s+" s\nWHERE\n  (\n    s._raw ~ 'TransmissionFilter - event=\"transmission.filtered\"'\n    OR\n    s._raw ~ 'EcgDlResultsProcessor - event=\"transmission.algorithm_processing_completed\"'\n  )\n  AND \n  (s.log_object ->> 'serial_number') = "+plv8.quote_literal(o)+"\n        ";try{plv8.subtransaction((function(){plv8.elog(INFO,"Creating table splunk_06_event_actions, "+(new Date).toISOString()),plv8.execute("CREATE TABLE splunk_06_event_actions AS ("+r+");")}))}catch(e){plv8.elog(INFO,"CREATE TABLE splunk_06_event_actions failed, error message: "+e+", "+(new Date).toISOString()),plv8.elog(INFO,"Inserting records into splunk_06_event_actions, "+(new Date).toISOString());try{plv8.subtransaction((function(){return plv8.execute("INSERT INTO splunk_06_event_actions "+r+" AND NOT EXISTS(SELECT 1 FROM splunk_06_event_actions sub WHERE sub._raw = s._raw);")}))}catch(e){plv8.elog(INFO,"INSERT INTO TABLE splunk_06_event_actions failed, error message: "+e+", "+(new Date).toISOString())}}}(_,l,i,n,t),function(e,n,t,s,o){var r="\nSELECT\n  s.sourcetype\n  , (JSONB_POPULATE_RECORD(NULL::skyrunner_review_output, s.log_object)).*\n  , s._raw\n  , s.log_object\n  , "+e+" ::TIMESTAMP first_connection_time\n  , "+n+" ::TIMESTAMP patch_activation_time\n  , "+t+" source_table\nFROM "+s+" s\nWHERE\n  s.sourcetype = 'skyrunner_ws'\n  AND \n  (s.log_object ->> 'serial_number') = "+plv8.quote_literal(o)+"\n        ";try{plv8.subtransaction((function(){plv8.elog(INFO,"Creating table splunk_07_review_outputs, "+(new Date).toISOString()),plv8.execute("CREATE TABLE splunk_07_review_outputs AS ("+r+");")}))}catch(e){plv8.elog(INFO,"CREATE TABLE splunk_07_review_outputs failed, error message: "+e+", "+(new Date).toISOString()),plv8.elog(INFO,"Inserting records into splunk_07_review_outputs, "+(new Date).toISOString());try{plv8.subtransaction((function(){return plv8.execute("INSERT INTO splunk_07_review_outputs "+r+" AND NOT EXISTS(SELECT 1 FROM splunk_07_review_outputs sub WHERE sub._raw = s._raw);")}))}catch(e){plv8.elog(INFO,"INSERT INTO TABLE splunk_07_review_outputs failed, error message: "+e+", "+(new Date).toISOString())}}}(_,l,i,n,t)})),o.free()})),s.free())})),plv8.execute("DROP TABLE IF EXISTS "+n+";"),plv8.elog(INFO,"Dropped temp table "+n+", "+(new Date).toISOString()),null}}));
